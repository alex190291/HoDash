Context:

- you will help me developing and implementing new features, bugfixes, and general improvements for a software development project

- the filestructure of the project will be provided below.

- always keep in mind that you can actively ask for files 

- you will split up the problem and possible causes into single "thoughts" and evaluate them as a whole

- then you will proceed to reason and think about the given taske as long as you need to think about it.

- always consider issues that could occur and ask me for feedback

- you will be really carefully implementing a solution for the required changes and output the corrected version of both files (app.py, index.html)

- if you need additional information or clearification to complete the task you must ask for it


Instructions:
- Go step by step through all considerations and always offer me multiple logical choices whenever a choice needs to be made
- when you prompt me directly always put ##### /SPEAKING #####  on top and ##### SPEAKING/ #####   on the bottom of the prompt and every line in between should begin with "# ". 
- if you are in doubt about any decision, start thinking and reasoning about all possible solutions and present me the best 5. 
- always reevaluate any decision with me and always prompt them with the best 5 options. the prompt should be short and informative and look like this:
##### /SPEAKING ##### 
#  <Consideration>
# < Possible solutions>
# <Pros/Cons>
# <Question>
#
# 1. <Solution 1>
# 2. <Solution 2>
# 3. <Solution 3>
# 4. <Solution 4>
# 5. <Solution 1>
# 6. <Ask me if you should reevaluate the presented solutions>
#

- actively ask for files
- actively ask for websearches
- actively ask for additional information
- for every file you output, reconsider it by reasoning and thinking about it again

Additional Information and important additional Instructions:
- the webapp consists of several cards (cpu, memory, disk, network, docker)
- each card has an extended view that shows additional details when the card is clicked
- each card hovers slightly when the mouse is moved above it
- the whole app uses the style of glassmorphism


Task:
- I need you to refactor the code i will provide
- the filesizes are too big and the code is pretty sloppy in terms of structure and naming conventions
- you are allowed to add additional libraries but you need to reevaluate any big change like that with me following the instructions provided above
- you are also allowed to consider other programming languages and frameworks as long as the ui doesnt change at all and you reevaluate your considerations with me following all the provided instructions.
- you can split up files into modules but keep possible issues in mind and reevaluate decisions with me following all provided instructions


!!! We already did some work together, here is an overview !!!

##### /SPEAKING #####  
# Here’s a distilled summary of the process, including the previous code structure, implemented changes, and a roadmap for proceeding with the remaining tasks (e.g., refactoring `index.html`).

### Original File Structure:
```
├── [20] templates/
│   └── [51K] index.html
├── [33K] app.py
├── [34K] LICENSE
├── [925] README.md
└── [2.4M] stats.db
```

### Current File Structure (Post-Refactoring):
```
├── [20] templates/
│   └── [51K] index.html
├── [33K] app.py
├── [34K] LICENSE
├── [925] README.md
├── [2.4M] stats.db
├── [13K] database.py  # Refactored to include DatabaseState class and connection pooling
└── [14K] docker.py     # Refactored to include DockerState class and task queue for Docker container updates
```

### Current Codebase Overview:
#### 1. **`app.py`**:
   - **Main Purpose**: Provides the core Flask routes for interacting with the backend.
   - **Key Changes**:
     - **Background Task Queue**: Introduced background processing using a `queue.Queue` for managing tasks like container updates and system stat updates asynchronously.
     - **Database and Docker Integration**: Integrated the `DatabaseState` and `DockerState` classes for managing system stats and Docker container data.
     - **Worker Thread**: A dedicated worker thread is started on app initialization to process tasks from the task queue without blocking the main Flask application.
     - **Flask Routes**: New routes were added for querying system stats (`/stats`), starting Docker container updates (`/update_container/<container_name>`), and checking the update status of containers (`/update_status/<container_name>`).

#### 2. **`database.py`**:
   - **Main Purpose**: Manages system stats data, handles SQLite connections, and implements task queue management for updates.
   - **Key Changes**:
     - **DatabaseState Class**: Centralized management of system stats (CPU, memory, disk history) and the database connection pool.
     - **Connection Pooling**: Introduced connection pooling for more efficient database interaction.
     - **Granular Locking**: Added individual locks for each data structure to manage concurrent access safely across threads.
     - **Task Queue**: Implemented background task queue to handle updates to the database state asynchronously, preventing blocking.
     - **Batch Insertions**: Optimized database inserts by batching updates, reducing the overhead of frequent commits.
     - **Data Caching**: Cached frequently accessed system data in memory to reduce database query overhead.

#### 3. **`docker.py`**:
   - **Main Purpose**: Handles Docker container updates, managing container states and interactions.
   - **Key Changes**:
     - **DockerState Class**: Centralized management of container statuses (update status, image info) and locking mechanisms.
     - **Task Queue**: Similar to `database.py`, Docker container updates are managed via a task queue to avoid blocking.
     - **Retry Mechanism**: Implemented retries with exponential backoff for Docker image pulls, improving resilience against temporary failures.
     - **Worker Threads**: Utilized threads for managing container updates, ensuring the main app remains responsive.
     - **Background Container Update Processing**: Docker container updates (including pulling images, stopping, and starting containers) are offloaded to background workers.

#### 4. **`index.html` (Not yet refactored)**:
   - **Current State**: The front-end (`index.html`) is styled with glassmorphism and displays system stats in various cards. The cards include data like CPU usage, memory, disk usage, and Docker container statuses.
   - **Required Changes**:
     - **Integration with API**: `index.html` needs to be refactored to properly integrate with the new Flask backend, which returns stats in JSON format. This includes updating the UI dynamically based on the latest data from the backend.
     - **Interactive Elements**: The frontend needs to handle background tasks, such as showing the status of Docker container updates or system stats in real-time.
     - **Error Handling**: Display user-friendly messages in case of errors (e.g., Docker container update failures).
     - **AJAX Requests**: Implement AJAX calls to fetch stats and update the page dynamically without reloading.

### Next Step: Refactor `index.html`:
- **Objective**: Ensure the front-end is fully compatible with the changes in `app.py`, particularly regarding the dynamic fetching of system stats (CPU, memory, disk) and handling Docker container updates. 
- **Tasks**:
  1. Replace static data display with dynamic content fetched via AJAX.
  2. Update cards to display real-time data for CPU, memory, disk usage, and Docker containers.
  3. Display container update statuses and allow interaction to trigger updates.
  4. Handle errors gracefully and show update progress.

---

This overview provides all the necessary details to proceed with the refactoring of `index.html`. By aligning the front-end with the backend changes, we can ensure a smooth user experience, where data is fetched dynamically, and background tasks (such as Docker updates) are seamlessly managed.

Would you like to proceed with the front-end updates, or would you prefer to focus on another aspect first?

